// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apiv2

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiTokenScopes = "apiToken.Scopes"
)

// Defines values for DataplaneRequestRequestType.
const (
	DataplaneRequestRequestTypeResultSet DataplaneRequestRequestType = "result-set"
	DataplaneRequestRequestTypeStreaming DataplaneRequestRequestType = "streaming"
)

// Defines values for ResultSetMetadataEncoding.
const (
	Json ResultSetMetadataEncoding = "json"
)

// Defines values for ResourceType.
const (
	ResourceTypeDescriptorSource ResourceType = "descriptor_source"
	ResourceTypeFunctionSource   ResourceType = "function_source"
)

// Defines values for DownloadResourceParamsResourceType.
const (
	DownloadResourceParamsResourceTypeDescriptorSource DownloadResourceParamsResourceType = "descriptor_source"
	DownloadResourceParamsResourceTypeFunctionSource   DownloadResourceParamsResourceType = "function_source"
)

// DataplaneRequest defines model for DataplaneRequest.
type DataplaneRequest struct {
	RequestType DataplaneRequestRequestType `json:"requestType"`
	StatementID string                      `json:"statementID"`
	Token       string                      `json:"token"`
	Uri         string                      `json:"uri"`
}

// DataplaneRequestRequestType defines model for DataplaneRequest.RequestType.
type DataplaneRequestRequestType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// ResultSet defines model for ResultSet.
type ResultSet struct {
	// CreatedOn UTC POSIX timestamp of when statement was submitted
	CreatedOn int64 `json:"createdOn"`

	// Data Each item within a column of data is expressed as a string, regardless of the DeltaStream type of the column.
	// For example, the number 1.0 will be returned as "1.0".
	Data        *[][]*string       `json:"data,omitempty"`
	Message     *string            `json:"message,omitempty"`
	Metadata    ResultSetMetadata  `json:"metadata"`
	SqlState    string             `json:"sqlState"`
	StatementID openapi_types.UUID `json:"statementID"`

	// StatementIDs IDs for each statement when a multi-statement SQL is submitted
	StatementIDs *[]openapi_types.UUID `json:"statementIDs,omitempty"`
}

// ResultSetColumns defines model for ResultSetColumns.
type ResultSetColumns = []struct {
	Name     string `json:"name"`
	Nullable bool   `json:"nullable"`
	Type     string `json:"type"`
}

// ResultSetContext defines model for ResultSetContext.
type ResultSetContext struct {
	DatabaseName   *string             `json:"databaseName,omitempty"`
	OrganizationID *openapi_types.UUID `json:"organizationID,omitempty"`
	RoleName       *string             `json:"roleName,omitempty"`
	SchemaName     *string             `json:"schemaName,omitempty"`
	StoreName      *string             `json:"storeName,omitempty"`
}

// ResultSetMetadata defines model for ResultSetMetadata.
type ResultSetMetadata struct {
	Columns          ResultSetColumns          `json:"columns"`
	Context          *ResultSetContext         `json:"context,omitempty"`
	DataplaneRequest *DataplaneRequest         `json:"dataplaneRequest,omitempty"`
	Encoding         ResultSetMetadataEncoding `json:"encoding"`
	PartitionInfo    []ResultSetPartitionInfo  `json:"partitionInfo"`
}

// ResultSetMetadataEncoding defines model for ResultSetMetadata.Encoding.
type ResultSetMetadataEncoding string

// ResultSetPartitionInfo defines model for ResultSetPartitionInfo.
type ResultSetPartitionInfo struct {
	RowCount int32 `json:"rowCount"`
}

// StatementRequest defines model for StatementRequest.
type StatementRequest struct {
	// Database Database to add to search path for name resolution. This value is case sensitive
	Database *string `json:"database,omitempty"`

	// Organization Organization Name or ID in which the statement should be executed
	Organization *string `json:"organization,omitempty"`
	Parameters   *struct {
		SessionID *string `json:"sessionID,omitempty"`
		Timezone  *string `json:"timezone,omitempty"`
	} `json:"parameters,omitempty"`

	// Role Role to use when executing a statement. This value is case sensitive
	Role *string `json:"role,omitempty"`

	// Schema Database schema to add to search path for name resolution. This value is case sensitive
	Schema *string `json:"schema,omitempty"`

	// Statement DeltaStream SQL statement or batch of SQL statements to execute
	Statement string `json:"statement"`

	// Store Store to add to search path for name resolution. This value is case sensitive
	Store *string `json:"store,omitempty"`
}

// StatementStatus defines model for StatementStatus.
type StatementStatus struct {
	// CreatedOn UTC POSIX timestamp of when statement was submitted
	CreatedOn   int64              `json:"createdOn"`
	Message     *string            `json:"message,omitempty"`
	SqlState    string             `json:"sqlState"`
	StatementID openapi_types.UUID `json:"statementID"`

	// StatementIDs IDs for each statement when a multi-statement SQL is submitted
	StatementIDs *[]openapi_types.UUID `json:"statementIDs,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Major int `json:"major"`
	Minor int `json:"minor"`
	Patch int `json:"patch"`
}

// OrganizationID defines model for organizationID.
type OrganizationID = openapi_types.UUID

// PartitionID defines model for partitionID.
type PartitionID = int32

// ResourceName defines model for resourceName.
type ResourceName = string

// ResourceType defines model for resourceType.
type ResourceType string

// SessionID defines model for sessionID.
type SessionID = string

// StatementID defines model for statementID.
type StatementID = openapi_types.UUID

// Timezone defines model for timezone.
type Timezone = string

// ErrBadRequest defines model for ErrBadRequest.
type ErrBadRequest = ErrorResponse

// ErrDeadlineExceeded defines model for ErrDeadlineExceeded.
type ErrDeadlineExceeded = ErrorResponse

// ErrForbidden defines model for ErrForbidden.
type ErrForbidden = ErrorResponse

// ErrInternal defines model for ErrInternal.
type ErrInternal = ErrorResponse

// ErrNotFound defines model for ErrNotFound.
type ErrNotFound = ErrorResponse

// ErrServiceUnavailable defines model for ErrServiceUnavailable.
type ErrServiceUnavailable = ErrorResponse

// DownloadResourceParamsResourceType defines parameters for DownloadResource.
type DownloadResourceParamsResourceType string

// SubmitStatementMultipartBody defines parameters for SubmitStatement.
type SubmitStatementMultipartBody struct {
	Attachments *[]openapi_types.File `json:"attachments,omitempty"`
	Request     StatementRequest      `json:"request"`
}

// GetStatementStatusParams defines parameters for GetStatementStatus.
type GetStatementStatusParams struct {
	SessionID   *SessionID   `form:"sessionID,omitempty" json:"sessionID,omitempty"`
	PartitionID *PartitionID `form:"partitionID,omitempty" json:"partitionID,omitempty"`
	Timezone    *Timezone    `form:"timezone,omitempty" json:"timezone,omitempty"`
}

// SubmitStatementJSONRequestBody defines body for SubmitStatement for application/json ContentType.
type SubmitStatementJSONRequestBody = StatementRequest

// SubmitStatementMultipartRequestBody defines body for SubmitStatement for multipart/form-data ContentType.
type SubmitStatementMultipartRequestBody SubmitStatementMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBillingPortalOrganizationID request
	GetBillingPortalOrganizationID(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadResource request
	DownloadResource(ctx context.Context, resourceType DownloadResourceParamsResourceType, organizationID OrganizationID, resourceName ResourceName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentPortalOrganizationID request
	GetPaymentPortalOrganizationID(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitStatementWithBody request with any body
	SubmitStatementWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitStatement(ctx context.Context, body SubmitStatementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatementStatus request
	GetStatementStatus(ctx context.Context, statementID StatementID, params *GetStatementStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBillingPortalOrganizationID(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingPortalOrganizationIDRequest(c.Server, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadResource(ctx context.Context, resourceType DownloadResourceParamsResourceType, organizationID OrganizationID, resourceName ResourceName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadResourceRequest(c.Server, resourceType, organizationID, resourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentPortalOrganizationID(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentPortalOrganizationIDRequest(c.Server, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitStatementWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitStatementRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitStatement(ctx context.Context, body SubmitStatementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitStatementRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatementStatus(ctx context.Context, statementID StatementID, params *GetStatementStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatementStatusRequest(c.Server, statementID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBillingPortalOrganizationIDRequest generates requests for GetBillingPortalOrganizationID
func NewGetBillingPortalOrganizationIDRequest(server string, organizationID OrganizationID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-portal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadResourceRequest generates requests for DownloadResource
func NewDownloadResourceRequest(server string, resourceType DownloadResourceParamsResourceType, organizationID OrganizationID, resourceName ResourceName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceName", runtime.ParamLocationPath, resourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentPortalOrganizationIDRequest generates requests for GetPaymentPortalOrganizationID
func NewGetPaymentPortalOrganizationIDRequest(server string, organizationID OrganizationID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payment-portal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitStatementRequest calls the generic SubmitStatement builder with application/json body
func NewSubmitStatementRequest(server string, body SubmitStatementJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitStatementRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitStatementRequestWithBody generates requests for SubmitStatement with any type of body
func NewSubmitStatementRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatementStatusRequest generates requests for GetStatementStatus
func NewGetStatementStatusRequest(server string, statementID StatementID, params *GetStatementStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statementID", runtime.ParamLocationPath, statementID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SessionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionID", runtime.ParamLocationQuery, *params.SessionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartitionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "partitionID", runtime.ParamLocationQuery, *params.PartitionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Timezone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timezone", runtime.ParamLocationQuery, *params.Timezone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBillingPortalOrganizationIDWithResponse request
	GetBillingPortalOrganizationIDWithResponse(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*GetBillingPortalOrganizationIDResponse, error)

	// DownloadResourceWithResponse request
	DownloadResourceWithResponse(ctx context.Context, resourceType DownloadResourceParamsResourceType, organizationID OrganizationID, resourceName ResourceName, reqEditors ...RequestEditorFn) (*DownloadResourceResponse, error)

	// GetPaymentPortalOrganizationIDWithResponse request
	GetPaymentPortalOrganizationIDWithResponse(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*GetPaymentPortalOrganizationIDResponse, error)

	// SubmitStatementWithBodyWithResponse request with any body
	SubmitStatementWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitStatementResponse, error)

	SubmitStatementWithResponse(ctx context.Context, body SubmitStatementJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitStatementResponse, error)

	// GetStatementStatusWithResponse request
	GetStatementStatusWithResponse(ctx context.Context, statementID StatementID, params *GetStatementStatusParams, reqEditors ...RequestEditorFn) (*GetStatementStatusResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetBillingPortalOrganizationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrBadRequest
	JSON403      *ErrForbidden
	JSON500      *ErrInternal
	JSON503      *ErrServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetBillingPortalOrganizationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingPortalOrganizationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrBadRequest
	JSON403      *ErrForbidden
	JSON404      *ErrNotFound
	JSON408      *ErrDeadlineExceeded
	JSON500      *ErrInternal
	JSON503      *ErrServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DownloadResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentPortalOrganizationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrBadRequest
	JSON403      *ErrForbidden
	JSON500      *ErrInternal
	JSON503      *ErrServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetPaymentPortalOrganizationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentPortalOrganizationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitStatementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultSet
	JSON202      *StatementStatus
	JSON400      *ErrBadRequest
	JSON403      *ErrForbidden
	JSON404      *ErrNotFound
	JSON408      *ErrDeadlineExceeded
	JSON500      *ErrInternal
	JSON503      *ErrServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r SubmitStatementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitStatementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatementStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultSet
	JSON202      *StatementStatus
	JSON400      *ErrBadRequest
	JSON403      *ErrForbidden
	JSON404      *ErrNotFound
	JSON408      *ErrDeadlineExceeded
	JSON500      *ErrInternal
	JSON503      *ErrServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetStatementStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatementStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
	JSON403      *ErrForbidden
	JSON500      *ErrInternal
	JSON503      *ErrServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBillingPortalOrganizationIDWithResponse request returning *GetBillingPortalOrganizationIDResponse
func (c *ClientWithResponses) GetBillingPortalOrganizationIDWithResponse(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*GetBillingPortalOrganizationIDResponse, error) {
	rsp, err := c.GetBillingPortalOrganizationID(ctx, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingPortalOrganizationIDResponse(rsp)
}

// DownloadResourceWithResponse request returning *DownloadResourceResponse
func (c *ClientWithResponses) DownloadResourceWithResponse(ctx context.Context, resourceType DownloadResourceParamsResourceType, organizationID OrganizationID, resourceName ResourceName, reqEditors ...RequestEditorFn) (*DownloadResourceResponse, error) {
	rsp, err := c.DownloadResource(ctx, resourceType, organizationID, resourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadResourceResponse(rsp)
}

// GetPaymentPortalOrganizationIDWithResponse request returning *GetPaymentPortalOrganizationIDResponse
func (c *ClientWithResponses) GetPaymentPortalOrganizationIDWithResponse(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*GetPaymentPortalOrganizationIDResponse, error) {
	rsp, err := c.GetPaymentPortalOrganizationID(ctx, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentPortalOrganizationIDResponse(rsp)
}

// SubmitStatementWithBodyWithResponse request with arbitrary body returning *SubmitStatementResponse
func (c *ClientWithResponses) SubmitStatementWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitStatementResponse, error) {
	rsp, err := c.SubmitStatementWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitStatementResponse(rsp)
}

func (c *ClientWithResponses) SubmitStatementWithResponse(ctx context.Context, body SubmitStatementJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitStatementResponse, error) {
	rsp, err := c.SubmitStatement(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitStatementResponse(rsp)
}

// GetStatementStatusWithResponse request returning *GetStatementStatusResponse
func (c *ClientWithResponses) GetStatementStatusWithResponse(ctx context.Context, statementID StatementID, params *GetStatementStatusParams, reqEditors ...RequestEditorFn) (*GetStatementStatusResponse, error) {
	rsp, err := c.GetStatementStatus(ctx, statementID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatementStatusResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetBillingPortalOrganizationIDResponse parses an HTTP response from a GetBillingPortalOrganizationIDWithResponse call
func ParseGetBillingPortalOrganizationIDResponse(rsp *http.Response) (*GetBillingPortalOrganizationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingPortalOrganizationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrForbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDownloadResourceResponse parses an HTTP response from a DownloadResourceWithResponse call
func ParseDownloadResourceResponse(rsp *http.Response) (*DownloadResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrForbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest ErrDeadlineExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPaymentPortalOrganizationIDResponse parses an HTTP response from a GetPaymentPortalOrganizationIDWithResponse call
func ParseGetPaymentPortalOrganizationIDResponse(rsp *http.Response) (*GetPaymentPortalOrganizationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentPortalOrganizationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrForbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSubmitStatementResponse parses an HTTP response from a SubmitStatementWithResponse call
func ParseSubmitStatementResponse(rsp *http.Response) (*SubmitStatementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitStatementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest StatementStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrForbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest ErrDeadlineExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetStatementStatusResponse parses an HTTP response from a GetStatementStatusWithResponse call
func ParseGetStatementStatusResponse(rsp *http.Response) (*GetStatementStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatementStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest StatementStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrForbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest ErrDeadlineExceeded
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrForbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
